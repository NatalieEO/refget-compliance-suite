[
  {
    "date_time": "2018-08-02 23:37:11.546703",
    "total_tests_failed": 1,
    "test_results": [
      {
        "test_description": "\n    Test to check if info-endpoint returns 200 OK with appropriate headers\n    ",
        "parents": [
          "test_base_algorithm"
        ],
        "name": "test_info_implement",
        "result": 1,
        "text": "Info endpoint implemented by the server",
        "children": [
          "test_info_implement_default",
          "test_info_circular",
          "test_info_algorithms",
          "test_info_subsequence",
          "test_info_api_version"
        ]
      },
      {
        "test_description": "\n    Test to check if info-endpoint returns 200 OK without headers\n    ",
        "parents": [
          "test_info_implement"
        ],
        "name": "test_info_implement_default",
        "result": 1,
        "text": "Info endpoint implemented with default encoding",
        "children": []
      },
      {
        "test_description": "\n    Test to check if info-endpoint has circular in the reponse object. And if\n    it is there it upates session_params['circular'] as per the value\n    ",
        "parents": [
          "test_info_implement"
        ],
        "name": "test_info_circular",
        "result": 1,
        "text": "\"circular\" key in info response object",
        "children": [
          "test_metadata_query_circular_sequence"
        ]
      },
      {
        "test_description": "\n    Test if metadata endpoint returns 200 using circular test sequence\n    if the server supports circular sequences. Value stored in session_params.\n    If not skip test and set skip text appropriately\n    ",
        "parents": [
          "test_metadata_implement",
          "test_info_circular"
        ],
        "name": "test_metadata_query_circular_sequence",
        "result": 1,
        "text": "Circular sequence metadata can be retrived",
        "children": []
      },
      {
        "test_description": "\n    Test to check if info-endpoint has algorithms in the reponse object. And if\n    it is there it upates session_params['trunc512'] as per the value\n    ",
        "parents": [
          "test_info_implement"
        ],
        "name": "test_info_algorithms",
        "result": 1,
        "text": "\"algorithms\" key in info response object",
        "children": [
          "test_metadata_query_by_trunc512",
          "test_metadata_trunc512",
          "test_sequence_query_by_trunc512"
        ]
      },
      {
        "test_description": "\n    Test if metadata endpoint returns 200 using trunc512 with I test sequence\n    if the server supports. Value stored in session_params. If not skip test\n    and set skip text appropriately\n    ",
        "parents": [
          "test_metadata_implement",
          "test_info_algorithms"
        ],
        "name": "test_metadata_query_by_trunc512",
        "result": 1,
        "text": "TRUNC512 algorithm is working in the server for metadata endpoint",
        "children": []
      },
      {
        "test_description": "\n    Test if trunc512 in metadata repsonse object. Skip if server does not\n    support trunc512\n    ",
        "parents": [
          "test_metadata_implement",
          "test_info_algorithms"
        ],
        "name": "test_metadata_trunc512",
        "result": 1,
        "text": "\"trunc512\" key in metadata response object",
        "children": []
      },
      {
        "test_description": null,
        "parents": [
          "test_sequence_implement",
          "test_info_algorithms"
        ],
        "name": "test_sequence_query_by_trunc512",
        "result": 1,
        "text": "TRUNC512 algorithm is working in the server for sequence endpoint",
        "children": []
      },
      {
        "test_description": "\n    Test to check if info-endpoint has subsequence_limit in the reponse object.\n    And if it is there it upates session_params['subsequence_limit'] as per the\n    value\n    ",
        "parents": [
          "test_info_implement"
        ],
        "name": "test_info_subsequence",
        "result": 1,
        "text": "\"subsequence_limit\" key in info response object",
        "children": []
      },
      {
        "test_description": "\n    Test to check if info-endpoint has supported_api_versions in the reponse\n    object.\n    ",
        "parents": [
          "test_info_implement"
        ],
        "name": "test_info_api_version",
        "result": 1,
        "text": "\"supported_api_versions\" key in info response object",
        "children": []
      },
      {
        "test_description": "\n    Test if metadata endpoint returns 200 with appropriate headers using I test\n    sequence\n    ",
        "parents": [
          "test_base_algorithm"
        ],
        "name": "test_metadata_implement",
        "result": 1,
        "text": "Metadata endpoint implemented by the server",
        "children": [
          "test_metadata_implement_default",
          "test_metadata_query_by_trunc512",
          "test_metadata_query_circular_sequence",
          "test_metadata_md5",
          "test_metadata_trunc512",
          "test_metadata_length",
          "test_metadata_aliases",
          "test_metadata_invalid_checksum_404_error",
          "test_metadata_invalid_encoding_415_error"
        ]
      },
      {
        "test_description": "\n    Test if metadata endpoint returns 200 without headers using I test sequence\n    ",
        "parents": [
          "test_metadata_implement"
        ],
        "name": "test_metadata_implement_default",
        "result": 1,
        "text": "Metadata endpoint implemented with default encoding",
        "children": []
      },
      {
        "test_description": "\n    Test if md5 in metadata repsonse object\n    ",
        "parents": [
          "test_metadata_implement"
        ],
        "name": "test_metadata_md5",
        "result": 1,
        "text": "\"md5\" key in metadata response object",
        "children": []
      },
      {
        "test_description": "\n    Test if length in metadata repsonse object\n    ",
        "parents": [
          "test_metadata_implement"
        ],
        "name": "test_metadata_length",
        "result": 1,
        "text": "\"length\" key in metadata response object",
        "children": []
      },
      {
        "test_description": "\n    Test if aliases in metadata repsonse object\n    ",
        "parents": [
          "test_metadata_implement"
        ],
        "name": "test_metadata_aliases",
        "result": 1,
        "text": "\"aliases\" key in metadata response object",
        "children": []
      },
      {
        "test_description": "\n    Test if 404 on invalid checksum in metadata repsonse\n    ",
        "parents": [
          "test_metadata_implement"
        ],
        "name": "test_metadata_invalid_checksum_404_error",
        "result": 1,
        "text": "Server is correctly sending 404 on invalid checksum",
        "children": []
      },
      {
        "test_description": "\n    Test if 415 on invalid encoding in Accept header\n    ",
        "parents": [
          "test_metadata_implement"
        ],
        "name": "test_metadata_invalid_encoding_415_error",
        "result": 1,
        "text": "Server is correctly sending 415 on invalid encoding",
        "children": []
      },
      {
        "test_description": null,
        "parents": [
          "test_base_algorithm"
        ],
        "name": "test_sequence_implement",
        "result": 1,
        "text": "Sequence endpoint implemented in the server",
        "children": [
          "test_sequence_implement_default",
          "test_sequence_start_end",
          "test_sequence_range",
          "test_sequence_query_by_trunc512",
          "test_sequence_invalid_checksum_404_error"
        ]
      },
      {
        "test_description": null,
        "parents": [
          "test_sequence_implement"
        ],
        "name": "test_sequence_implement_default",
        "result": 1,
        "text": "Sequence endpoint implemented with default encoding",
        "children": []
      },
      {
        "test_description": null,
        "parents": [
          "test_sequence_implement"
        ],
        "name": "test_sequence_start_end",
        "result": 1,
        "text": "Server supports start end query params",
        "children": []
      },
      {
        "test_description": null,
        "parents": [
          "test_sequence_implement"
        ],
        "name": "test_sequence_range",
        "result": -1,
        "text": "Server does not support range header",
        "children": [
          "test_sequence_range_success_cases"
        ]
      },
      {
        "test_description": null,
        "parents": [
          "test_sequence_range"
        ],
        "name": "test_sequence_range_success_cases",
        "result": 0,
        "text": "test_sequence_range_success_cases is skipped because\n\tServer does not support range header",
        "children": []
      },
      {
        "test_description": null,
        "parents": [
          "test_sequence_implement"
        ],
        "name": "test_sequence_invalid_checksum_404_error",
        "result": 1,
        "text": "Server is correctly sending 404 on invalid checksum",
        "children": []
      }
    ],
    "server": "http://localhost:5000/",
    "total_tests_passed": 21,
    "total_tests_skipped": 1,
    "total_warnings": 2,
    "total_tests": 23
  }
]
