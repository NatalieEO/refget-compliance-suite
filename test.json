[{"total_tests_failed": 1, "total_tests_skipped": 5, "total_tests": 23, "test_results": [{"parents": ["test_base_algorithm"], "result": 1, "children": ["test_info_implement_default", "test_info_circular", "test_info_algorithms", "test_info_subsequence", "test_info_api_version"], "text": "Info endpoint implemented by the server", "name": "test_info_implement", "test_description": "\n    Test to check if info-endpoint returns 200 OK with appropriate headers\n    "}, {"parents": ["test_info_implement"], "result": 1, "children": [], "text": "Info endpoint implemented with default encoding", "name": "test_info_implement_default", "test_description": "\n    Test to check if info-endpoint returns 200 OK without headers\n    "}, {"parents": ["test_info_implement"], "result": 1, "children": ["test_metadata_query_circular_sequence"], "text": "\"circular\" key in info response object", "name": "test_info_circular", "test_description": "\n    Test to check if info-endpoint has circular in the reponse object. And if\n    it is there it upates session_params['circular'] as per the value\n    "}, {"parents": ["test_metadata_implement", "test_info_circular"], "result": 0, "children": [], "text": "test_metadata_query_circular_sequence is skipped because server does not support circular sequences", "name": "test_metadata_query_circular_sequence", "test_description": "\n    Test if metadata endpoint returns 200 using circular test sequence\n    if the server supports circular sequences. Value stored in session_params.\n    If not skip test and set skip text appropriately\n    "}, {"parents": ["test_info_implement"], "result": 1, "children": ["test_metadata_query_by_trunc512", "test_metadata_trunc512", "test_sequence_query_by_trunc512"], "text": "\"algorithms\" key in info response object", "name": "test_info_algorithms", "test_description": "\n    Test to check if info-endpoint has algorithms in the reponse object. And if\n    it is there it upates session_params['trunc512'] as per the value\n    "}, {"parents": ["test_metadata_implement", "test_info_algorithms"], "result": 0, "children": [], "text": "test_metadata_query_by_trunc512 is skipped because server does not support TRUNC512 algorithm", "name": "test_metadata_query_by_trunc512", "test_description": "\n    Test if metadata endpoint returns 200 using trunc512 with I test sequence\n    if the server supports. Value stored in session_params. If not skip test\n    and set skip text appropriately\n    "}, {"parents": ["test_metadata_implement", "test_info_algorithms"], "result": 0, "children": [], "text": "test_metadata_trunc512 is skipped because key \"trunc512\" although it is supported by the server", "name": "test_metadata_trunc512", "test_description": "\n    Test if trunc512 in metadata repsonse object. Skip if server does not\n    support trunc512\n    "}, {"parents": ["test_sequence_implement", "test_info_algorithms"], "result": 0, "children": [], "text": "test_sequence_query_by_trunc512 is skipped because server does not support TRUNC512 algorithm", "name": "test_sequence_query_by_trunc512", "test_description": null}, {"parents": ["test_info_implement"], "result": 1, "children": [], "text": "\"subsequence_limit\" key in info response object", "name": "test_info_subsequence", "test_description": "\n    Test to check if info-endpoint has subsequence_limit in the reponse object.\n    And if it is there it upates session_params['subsequence_limit'] as per the\n    value\n    "}, {"parents": ["test_info_implement"], "result": 1, "children": [], "text": "\"supported_api_versions\" key in info response object", "name": "test_info_api_version", "test_description": "\n    Test to check if info-endpoint has supported_api_versions in the reponse\n    object.\n    "}, {"parents": ["test_base_algorithm"], "result": 1, "children": ["test_metadata_implement_default", "test_metadata_query_by_trunc512", "test_metadata_query_circular_sequence", "test_metadata_md5", "test_metadata_trunc512", "test_metadata_length", "test_metadata_aliases", "test_metadata_invalid_checksum_404_error", "test_metadata_invalid_encoding_415_error"], "text": "Metadata endpoint implemented by the server", "name": "test_metadata_implement", "test_description": "\n    Test if metadata endpoint returns 200 with appropriate headers using I test\n    sequence\n    "}, {"parents": ["test_metadata_implement"], "result": 1, "children": [], "text": "Metadata endpoint implemented with default encoding", "name": "test_metadata_implement_default", "test_description": "\n    Test if metadata endpoint returns 200 without headers using I test sequence\n    "}, {"parents": ["test_metadata_implement"], "result": 1, "children": [], "text": "\"md5\" key in metadata response object", "name": "test_metadata_md5", "test_description": "\n    Test if md5 in metadata repsonse object\n    "}, {"parents": ["test_metadata_implement"], "result": 1, "children": [], "text": "\"length\" key in metadata response object", "name": "test_metadata_length", "test_description": "\n    Test if length in metadata repsonse object\n    "}, {"parents": ["test_metadata_implement"], "result": 1, "children": [], "text": "\"aliases\" key in metadata response object", "name": "test_metadata_aliases", "test_description": "\n    Test if aliases in metadata repsonse object\n    "}, {"parents": ["test_metadata_implement"], "result": 1, "children": [], "text": "Server is correctly sending 404 on invalid checksum", "name": "test_metadata_invalid_checksum_404_error", "test_description": "\n    Test if 404 on invalid checksum in metadata repsonse\n    "}, {"parents": ["test_metadata_implement"], "result": 1, "children": [], "text": "Server is correctly sending 415 on invalid encoding", "name": "test_metadata_invalid_encoding_415_error", "test_description": "\n    Test if 415 on invalid encoding in Accept header\n    "}, {"parents": ["test_base_algorithm"], "result": 1, "children": ["test_sequence_implement_default", "test_sequence_start_end", "test_sequence_range", "test_sequence_query_by_trunc512", "test_sequence_invalid_checksum_404_error"], "text": "Sequence endpoint implemented in the server", "name": "test_sequence_implement", "test_description": null}, {"parents": ["test_sequence_implement"], "result": 1, "children": [], "text": "Sequence endpoint implemented with default encoding", "name": "test_sequence_implement_default", "test_description": null}, {"parents": ["test_sequence_implement"], "result": 1, "children": [], "text": "Server supports start end query params", "name": "test_sequence_start_end", "test_description": null}, {"parents": ["test_sequence_implement"], "result": -1, "children": ["test_sequence_range_success_cases"], "text": "Server does not support range header", "name": "test_sequence_range", "test_description": null}, {"parents": ["test_sequence_range"], "result": 0, "children": [], "text": "test_sequence_range_success_cases is skipped because\n\tServer does not support range header", "name": "test_sequence_range_success_cases", "test_description": null}, {"parents": ["test_sequence_implement"], "result": 1, "children": [], "text": "Server is correctly sending 404 on invalid checksum", "name": "test_sequence_invalid_checksum_404_error", "test_description": null}], "server": "http://localhost:5000/", "total_warnings": 2, "date_time": "2018-08-02 23:58:10.449495", "total_tests_passed": 17}]